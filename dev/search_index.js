var documenterSearchIndex = {"docs":
[{"location":"primitives_0D/#0D-Primitives","page":"0-Dimensional Primitives","title":"0D Primitives","text":"","category":"section"},{"location":"primitives_0D/#Vertex","page":"0-Dimensional Primitives","title":"Vertex","text":"","category":"section"},{"location":"primitives_0D/","page":"0-Dimensional Primitives","title":"0-Dimensional Primitives","text":"Modules = [Euclid]\nPages   = [\"Vertex.jl\"]\nOrder   = [:function, :type]","category":"page"},{"location":"primitives_0D/#Euclid.Vertex","page":"0-Dimensional Primitives","title":"Euclid.Vertex","text":"struct Vertex{T} <: Euclid.AbstractGeometricPrimitive{T, 0}\n\np::StaticArraysCore.SVector{3}\n\n\n\n\n\n","category":"type"},{"location":"primitives_2D/#2D-Primitives","page":"2-Dimensional Primitives","title":"2D Primitives","text":"","category":"section"},{"location":"primitives_2D/#Circle","page":"2-Dimensional Primitives","title":"Circle","text":"","category":"section"},{"location":"primitives_2D/","page":"2-Dimensional Primitives","title":"2-Dimensional Primitives","text":"Modules = [Euclid]\nPages   = [\"Circle.jl\"]\nOrder   = [:function, :type]","category":"page"},{"location":"primitives_2D/#Euclid.Circle","page":"2-Dimensional Primitives","title":"Euclid.Circle","text":"struct Circle{T} <: Euclid.AbstractGeometricPrimitive{T, 2}\n\nradius::Any\n\n\n\n\n\n","category":"type"},{"location":"primitives_2D/#CurveLoop","page":"2-Dimensional Primitives","title":"CurveLoop","text":"","category":"section"},{"location":"primitives_2D/","page":"2-Dimensional Primitives","title":"2-Dimensional Primitives","text":"Modules = [Euclid]\nPages   = [\"CurveLoop.jl\"]\nOrder   = [:function, :type]","category":"page"},{"location":"primitives_2D/#Euclid.CurveLoop","page":"2-Dimensional Primitives","title":"Euclid.CurveLoop","text":"struct CurveLoop{T, A<:(AbstractArray{<:Euclid.AbstractPrimitive{T, 1}, 1})} <: Euclid.AbstractGeometricPrimitive{T, 2}\n\ncurves::AbstractVector{<:Euclid.AbstractPrimitive{T, 1}} where T\n\n\n\n\n\n","category":"type"},{"location":"primitives_2D/#Ellipse","page":"2-Dimensional Primitives","title":"Ellipse","text":"","category":"section"},{"location":"primitives_2D/","page":"2-Dimensional Primitives","title":"2-Dimensional Primitives","text":"Modules = [Euclid]\nPages   = [\"Ellipse.jl\"]\nOrder   = [:function, :type]","category":"page"},{"location":"primitives_2D/#Euclid.Ellipse","page":"2-Dimensional Primitives","title":"Euclid.Ellipse","text":"struct Ellipse{T} <: Euclid.AbstractGeometricPrimitive{T, 2}\n\na::Any\nb::Any\n\n\n\n\n\n","category":"type"},{"location":"primitives_2D/#LineLoop","page":"2-Dimensional Primitives","title":"LineLoop","text":"","category":"section"},{"location":"primitives_2D/","page":"2-Dimensional Primitives","title":"2-Dimensional Primitives","text":"Modules = [Euclid]\nPages   = [\"LineLoop.jl\"]\nOrder   = [:function, :type]","category":"page"},{"location":"primitives_2D/#Euclid.LineLoop","page":"2-Dimensional Primitives","title":"Euclid.LineLoop","text":"struct LineLoop{T, A<:(Tuple{Vararg{T, N}} where {N, T})} <: Euclid.AbstractGeometricPrimitive{T, 2}\n\nlines::Tuple{Vararg{T, N}} where {N, T}\n\n\n\n\n\n","category":"type"},{"location":"primitives_2D/#Rectangle","page":"2-Dimensional Primitives","title":"Rectangle","text":"","category":"section"},{"location":"primitives_2D/","page":"2-Dimensional Primitives","title":"2-Dimensional Primitives","text":"Modules = [Euclid]\nPages   = [\"Rectangle.jl\"]\nOrder   = [:function, :type]","category":"page"},{"location":"primitives_2D/#Euclid.Rectangle","page":"2-Dimensional Primitives","title":"Euclid.Rectangle","text":"struct Rectangle{T} <: Euclid.AbstractGeometricPrimitive{T, 2}\n\nlower_corner::StaticArraysCore.SVector{3}\nwidth::Any\nheight::Any\n\n\n\n\n\n","category":"type"},{"location":"abstract/#Abstract-types","page":"Abstract types","title":"Abstract types","text":"","category":"section"},{"location":"abstract/","page":"Abstract types","title":"Abstract types","text":"Modules = [Euclid]\nPages   = [\"AbstractTypes.jl\"]\nOrder   = [:function, :type]","category":"page"},{"location":"abstract/#Base.eltype-Union{Tuple{Euclid.AbstractPrimitive{T, N}}, Tuple{N}, Tuple{T}} where {T, N}","page":"Abstract types","title":"Base.eltype","text":"\n\n\n\n","category":"method"},{"location":"abstract/#Base.ndims-Union{Tuple{Euclid.AbstractPrimitive{T, N}}, Tuple{N}, Tuple{T}} where {T, N}","page":"Abstract types","title":"Base.ndims","text":"\n\n\n\n","category":"method"},{"location":"abstract/#Euclid.AbstractAffinePrimitive","page":"Abstract types","title":"Euclid.AbstractAffinePrimitive","text":"abstract type AbstractAffinePrimitive{T, N, M, MInv, P<:Euclid.AbstractPrimitive{T, N}} <: Euclid.AbstractPrimitive{T, N}\n\n\n\n\n\n","category":"type"},{"location":"abstract/#Euclid.AbstractBooleanPrimitive","page":"Abstract types","title":"Euclid.AbstractBooleanPrimitive","text":"abstract type AbstractBooleanPrimitive{T, N, A, B} <: Euclid.AbstractPrimitive{T, N}\n\n\n\n\n\n","category":"type"},{"location":"abstract/#Euclid.AbstractDynamicBooleanPrimitive","page":"Abstract types","title":"Euclid.AbstractDynamicBooleanPrimitive","text":"abstract type AbstractDynamicBooleanPrimitive{T, N, A<:Euclid.AbstractPrimitive{T, N}, B<:(AbstractArray{<:Euclid.AbstractPrimitive{T, N}, 1})} <: Euclid.AbstractBooleanPrimitive{T, N, A<:Euclid.AbstractPrimitive{T, N}, B<:(AbstractArray{<:Euclid.AbstractPrimitive{T, N}, 1})}\n\n\n\n\n\n","category":"type"},{"location":"abstract/#Euclid.AbstractGeometricPrimitive","page":"Abstract types","title":"Euclid.AbstractGeometricPrimitive","text":"abstract type AbstractGeometricPrimitive{T, N} <: Euclid.AbstractPrimitive{T, N}\n\n\n\n\n\n","category":"type"},{"location":"abstract/#Euclid.AbstractPrimitive","page":"Abstract types","title":"Euclid.AbstractPrimitive","text":"abstract type AbstractPrimitive{T, N}\n\n\n\n\n\n","category":"type"},{"location":"abstract/#Euclid.AbstractStaticBooleanPrimitive","page":"Abstract types","title":"Euclid.AbstractStaticBooleanPrimitive","text":"abstract type AbstractStaticBooleanPrimitive{T, N, A<:Euclid.AbstractPrimitive{T, N}, B<:Euclid.AbstractPrimitive{T, N}} <: Euclid.AbstractBooleanPrimitive{T, N, A<:Euclid.AbstractPrimitive{T, N}, B<:Euclid.AbstractPrimitive{T, N}}\n\n\n\n\n\n","category":"type"},{"location":"abstract/#Euclid.AffineTransformation","page":"Abstract types","title":"Euclid.AffineTransformation","text":"struct AffineTransformation{T}\n\nA::StaticArraysCore.SMatrix{3, 3, T, 9} where T\nc::StaticArraysCore.SVector{3}\n\n\n\n\n\n","category":"type"},{"location":"abstract/#Euclid.Axis","page":"Abstract types","title":"Euclid.Axis","text":"struct Axis{T}\n\nlocation::StaticArraysCore.SVector{3}\naxis::StaticArraysCore.SVector{3}\nref_direction::StaticArraysCore.SVector{3}\n\n\n\n\n\n","category":"type"},{"location":"abstract/#Euclid.Direction","page":"Abstract types","title":"Euclid.Direction","text":"struct SArray{Tuple{3}, T, 1, 3} <: StaticArraysCore.StaticArray{Tuple{3}, T, 1}\n\ndata::Tuple{T, T, T} where T\n\n\n\n\n\n","category":"type"},{"location":"abstract/#Euclid.Plane","page":"Abstract types","title":"Euclid.Plane","text":"struct Plane{T}\n\naxis::Euclid.Axis\n\n\n\n\n\n","category":"type"},{"location":"abstract/#Euclid.Point","page":"Abstract types","title":"Euclid.Point","text":"struct SArray{Tuple{3}, T, 1, 3} <: StaticArraysCore.StaticArray{Tuple{3}, T, 1}\n\ndata::Tuple{T, T, T} where T\n\n\n\n\n\n","category":"type"},{"location":"affine/#Affine-transformations","page":"Affine Transformation","title":"Affine transformations","text":"","category":"section"},{"location":"affine/","page":"Affine Transformation","title":"Affine Transformation","text":"Modules = [Euclid]\nPages   = [\"Affine.jl\"]\nOrder   = [:function, :type]","category":"page"},{"location":"affine/#Euclid.rotate-Tuple{Euclid.AbstractPrimitive, Symbol, Any}","page":"Affine Transformation","title":"Euclid.rotate","text":"rotate(\n    g::Euclid.AbstractPrimitive,\n    axis::Symbol,\n    angle\n) -> Euclid.AffineMapContainer\n\n\n\n\n\n\n","category":"method"},{"location":"affine/#Euclid.scale-Tuple{Euclid.AbstractPrimitive, Any, Any, Any}","page":"Affine Transformation","title":"Euclid.scale","text":"scale(\n    g::Euclid.AbstractPrimitive,\n    x,\n    y,\n    z\n) -> Euclid.AffineMapContainer\n\n\n\n\n\n\n","category":"method"},{"location":"affine/#Euclid.shear-Tuple{Euclid.AbstractPrimitive, Any}","page":"Affine Transformation","title":"Euclid.shear","text":"shear(\n    g::Euclid.AbstractPrimitive,\n    gamma\n) -> Euclid.AffineMapContainer\n\n\n\n\n\n\n","category":"method"},{"location":"affine/#Euclid.translate-Tuple{Euclid.AbstractPrimitive, Any, Any, Any}","page":"Affine Transformation","title":"Euclid.translate","text":"translate(\n    g::Euclid.AbstractPrimitive,\n    x,\n    y,\n    z\n) -> Euclid.AffineMapContainer\n\n\n\n\n\n\n","category":"method"},{"location":"affine/#Euclid.AffineMapContainer","page":"Affine Transformation","title":"Euclid.AffineMapContainer","text":"transform::Euclid.AffineTransformation\ntransform_inv::Euclid.AffineTransformation\nprimitive::Euclid.AbstractPrimitive\n\n\n\n\n\n","category":"type"},{"location":"affine/#Euclid.AffineMapContainer-Union{Tuple{T}, Tuple{Any, T}} where T<:Euclid.AbstractPrimitive","page":"Affine Transformation","title":"Euclid.AffineMapContainer","text":"AffineMapContainer(\n    transform,\n    primitive::Euclid.AbstractPrimitive\n) -> Euclid.AffineMapContainer\n\n\n\n\n\n\n","category":"method"},{"location":"primitives_1D/#1D-Primitives","page":"1-Dimensional Primitives","title":"1D Primitives","text":"","category":"section"},{"location":"primitives_1D/#Line","page":"1-Dimensional Primitives","title":"Line","text":"","category":"section"},{"location":"primitives_1D/","page":"1-Dimensional Primitives","title":"1-Dimensional Primitives","text":"Modules = [Euclid]\nPages   = [\"Line.jl\"]\nOrder   = [:function, :type]","category":"page"},{"location":"primitives_1D/#Euclid.Line","page":"1-Dimensional Primitives","title":"Euclid.Line","text":"struct Line{T} <: Euclid.AbstractGeometricPrimitive{T, 1}\n\na::StaticArraysCore.SVector{3}\nb::StaticArraysCore.SVector{3}\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Euclid","category":"page"},{"location":"#Euclid","page":"Home","title":"Euclid","text":"","category":"section"},{"location":"boolean/#Boolean-operations","page":"Boolean Operations","title":"Boolean operations","text":"","category":"section"},{"location":"boolean/#Difference","page":"Boolean Operations","title":"Difference","text":"","category":"section"},{"location":"boolean/","page":"Boolean Operations","title":"Boolean Operations","text":"Modules = [Euclid]\nPages   = [\"Difference.jl\"]\nOrder   = [:function, :type]","category":"page"},{"location":"boolean/#Euclid.difference-Tuple{Euclid.AbstractPrimitive, AbstractVector{<:Euclid.AbstractPrimitive}}","page":"Boolean Operations","title":"Euclid.difference","text":"difference(\n    g1::Euclid.AbstractPrimitive,\n    g2::AbstractVector{<:Euclid.AbstractPrimitive}\n) -> Euclid.DynamicDifference\n\n\n\n\n\n\n","category":"method"},{"location":"boolean/#Euclid.difference-Tuple{Euclid.AbstractPrimitive, Euclid.AbstractPrimitive}","page":"Boolean Operations","title":"Euclid.difference","text":"difference(\n    g1::Euclid.AbstractPrimitive,\n    g2::Euclid.AbstractPrimitive\n) -> Euclid.StaticDifference\n\n\n\n\n\n\n","category":"method"},{"location":"boolean/#Euclid.DynamicDifference","page":"Boolean Operations","title":"Euclid.DynamicDifference","text":"struct DynamicDifference{T, N, A<:Euclid.AbstractPrimitive{T, N}, B<:(AbstractArray{<:Euclid.AbstractPrimitive{T, N}, 1})} <: Euclid.AbstractDynamicBooleanPrimitive{T, N, A<:Euclid.AbstractPrimitive{T, N}, B<:(AbstractArray{<:Euclid.AbstractPrimitive{T, N}, 1})}\n\nleft::Euclid.AbstractPrimitive\nright::AbstractVector{<:Euclid.AbstractPrimitive{T, N}} where {T, N}\n\n\n\n\n\n","category":"type"},{"location":"boolean/#Euclid.StaticDifference","page":"Boolean Operations","title":"Euclid.StaticDifference","text":"struct StaticDifference{T, N, A<:Euclid.AbstractPrimitive{T, N}, B<:Euclid.AbstractPrimitive{T, N}} <: Euclid.AbstractStaticBooleanPrimitive{T, N, A<:Euclid.AbstractPrimitive{T, N}, B<:Euclid.AbstractPrimitive{T, N}}\n\nleft::Euclid.AbstractPrimitive\nright::Euclid.AbstractPrimitive\n\n\n\n\n\n","category":"type"},{"location":"boolean/#Intersection","page":"Boolean Operations","title":"Intersection","text":"","category":"section"},{"location":"boolean/","page":"Boolean Operations","title":"Boolean Operations","text":"Modules = [Euclid]\nPages   = [\"Intersection.jl\"]\nOrder   = [:function, :type]","category":"page"},{"location":"boolean/#Base.intersect-Tuple{Euclid.AbstractPrimitive, AbstractVector{<:Euclid.AbstractPrimitive}}","page":"Boolean Operations","title":"Base.intersect","text":"intersect(\n    g1::Euclid.AbstractPrimitive,\n    g2::AbstractVector{<:Euclid.AbstractPrimitive}\n) -> Euclid.DynamicIntersection\n\n\n\n\n\n\n","category":"method"},{"location":"boolean/#Base.intersect-Tuple{Euclid.AbstractPrimitive, Euclid.AbstractPrimitive}","page":"Boolean Operations","title":"Base.intersect","text":"intersect(\n    g1::Euclid.AbstractPrimitive,\n    g2::Euclid.AbstractPrimitive\n) -> Euclid.StaticIntersection\n\n\n\n\n\n\n","category":"method"},{"location":"boolean/#Euclid.DynamicIntersection","page":"Boolean Operations","title":"Euclid.DynamicIntersection","text":"struct DynamicIntersection{T, N, A<:Euclid.AbstractPrimitive{T, N}, B<:(AbstractArray{<:Euclid.AbstractPrimitive{T, N}, 1})} <: Euclid.AbstractDynamicBooleanPrimitive{T, N, A<:Euclid.AbstractPrimitive{T, N}, B<:(AbstractArray{<:Euclid.AbstractPrimitive{T, N}, 1})}\n\nleft::Euclid.AbstractPrimitive\nright::AbstractVector{<:Euclid.AbstractPrimitive{T, N}} where {T, N}\n\n\n\n\n\n","category":"type"},{"location":"boolean/#Euclid.StaticIntersection","page":"Boolean Operations","title":"Euclid.StaticIntersection","text":"struct StaticIntersection{T, N, A<:Euclid.AbstractPrimitive{T, N}, B<:Euclid.AbstractPrimitive{T, N}} <: Euclid.AbstractStaticBooleanPrimitive{T, N, A<:Euclid.AbstractPrimitive{T, N}, B<:Euclid.AbstractPrimitive{T, N}}\n\nleft::Euclid.AbstractPrimitive\nright::Euclid.AbstractPrimitive\n\n\n\n\n\n","category":"type"},{"location":"boolean/#Union","page":"Boolean Operations","title":"Union","text":"","category":"section"},{"location":"boolean/","page":"Boolean Operations","title":"Boolean Operations","text":"Modules = [Euclid]\nPages   = [\"Union.jl\"]\nOrder   = [:function, :type]","category":"page"},{"location":"boolean/#Base.union-Tuple{Euclid.AbstractPrimitive, AbstractVector{<:Euclid.AbstractPrimitive}}","page":"Boolean Operations","title":"Base.union","text":"union(\n    g1::Euclid.AbstractPrimitive,\n    g2::AbstractVector{<:Euclid.AbstractPrimitive}\n) -> Union{Euclid.DynamicUnion{_A, _B, var\"#s178\", <:AbstractVector{var\"#s26\"}} where {_B, var\"#s178\"<:Euclid.AbstractPrimitive{_A, _B}, var\"#s26\"<:Euclid.AbstractPrimitive{_A, _B}}, Euclid.DynamicUnion{_A, _B, var\"#s178\", B} where {_B, var\"#s178\"<:Euclid.AbstractPrimitive{_A, _B}, var\"#s26\"<:Euclid.AbstractPrimitive{_A, _B}, B<:AbstractVector{var\"#s26\"}}, Euclid.DynamicUnion{_A, N, var\"#s178\", <:AbstractVector{var\"#s26\"}} where {N, var\"#s178\"<:Euclid.AbstractPrimitive{_A, N}, var\"#s26\"<:Euclid.AbstractPrimitive{_A, N}}, Euclid.DynamicUnion{_A, N, var\"#s178\", B} where {N, var\"#s178\"<:Euclid.AbstractPrimitive{_A, N}, var\"#s26\"<:Euclid.AbstractPrimitive{_A, N}, B<:AbstractVector{var\"#s26\"}}} where _A\n\n\n\n\n\n\n","category":"method"},{"location":"boolean/#Base.union-Tuple{Euclid.AbstractPrimitive, Euclid.AbstractPrimitive}","page":"Boolean Operations","title":"Base.union","text":"union(\n    g1::Euclid.AbstractPrimitive,\n    g2::Euclid.AbstractPrimitive\n) -> Euclid.StaticUnion\n\n\n\n\n\n\n","category":"method"},{"location":"boolean/#Base.union-Tuple{Euclid.AbstractPrimitive, Nothing}","page":"Boolean Operations","title":"Base.union","text":"union(\n    g::Euclid.AbstractPrimitive,\n    _::Nothing\n) -> Euclid.AbstractPrimitive\n\n\n\n\n\n\n","category":"method"},{"location":"boolean/#Base.union-Tuple{Nothing, Euclid.AbstractPrimitive}","page":"Boolean Operations","title":"Base.union","text":"union(\n    _::Nothing,\n    g::Euclid.AbstractPrimitive\n) -> Euclid.AbstractPrimitive\n\n\n\n\n\n\n","category":"method"},{"location":"boolean/#Euclid.DynamicUnion","page":"Boolean Operations","title":"Euclid.DynamicUnion","text":"struct DynamicUnion{T, N, A<:Euclid.AbstractPrimitive{T, N}, B<:(AbstractArray{<:Euclid.AbstractPrimitive{T, N}, 1})} <: Euclid.AbstractDynamicBooleanPrimitive{T, N, A<:Euclid.AbstractPrimitive{T, N}, B<:(AbstractArray{<:Euclid.AbstractPrimitive{T, N}, 1})}\n\nleft::Euclid.AbstractPrimitive\nright::AbstractVector{<:Euclid.AbstractPrimitive{T, N}} where {T, N}\n\n\n\n\n\n","category":"type"},{"location":"boolean/#Euclid.StaticUnion","page":"Boolean Operations","title":"Euclid.StaticUnion","text":"struct StaticUnion{T, N, A<:Euclid.AbstractPrimitive{T, N}, B<:Euclid.AbstractPrimitive{T, N}} <: Euclid.AbstractStaticBooleanPrimitive{T, N, A<:Euclid.AbstractPrimitive{T, N}, B<:Euclid.AbstractPrimitive{T, N}}\n\nleft::Euclid.AbstractPrimitive\nright::Euclid.AbstractPrimitive\n\n\n\n\n\n","category":"type"}]
}
